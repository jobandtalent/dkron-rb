=begin
#Dkron REST API

#You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.  Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add the `pretty=true` param to format the response. 

OpenAPI spec version: 0.9.2

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Dkron
  class JobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Create or updates a new job. 
    # @param body Updated job object
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def create_or_update_job(body, opts = {})
      data, _status_code, _headers = create_or_update_job_with_http_info(body, opts)
      return data
    end

    # 
    # Create or updates a new job. 
    # @param body Updated job object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def create_or_update_job_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.create_or_update_job ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling JobsApi.create_or_update_job" if body.nil?
      # resource path
      local_var_path = "/jobs".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#create_or_update_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete a job. 
    # @param job_name The job that needs to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def delete_job(job_name, opts = {})
      data, _status_code, _headers = delete_job_with_http_info(job_name, opts)
      return data
    end

    # 
    # Delete a job. 
    # @param job_name The job that needs to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def delete_job_with_http_info(job_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.delete_job ..."
      end
      # verify the required parameter 'job_name' is set
      fail ArgumentError, "Missing the required parameter 'job_name' when calling JobsApi.delete_job" if job_name.nil?
      # resource path
      local_var_path = "/jobs/{job_name}".sub('{format}','json').sub('{' + 'job_name' + '}', job_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#delete_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List jobs. 
    # @param [Hash] opts the optional parameters
    # @return [Array<Job>]
    def get_jobs(opts = {})
      data, _status_code, _headers = get_jobs_with_http_info(opts)
      return data
    end

    # 
    # List jobs. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Job>, Fixnum, Hash)>] Array<Job> data, response status code and response headers
    def get_jobs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.get_jobs ..."
      end
      # resource path
      local_var_path = "/jobs".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Job>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#get_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Executes a job. 
    # @param job_name The job that needs to be run.
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def run_job(job_name, opts = {})
      data, _status_code, _headers = run_job_with_http_info(job_name, opts)
      return data
    end

    # 
    # Executes a job. 
    # @param job_name The job that needs to be run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def run_job_with_http_info(job_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.run_job ..."
      end
      # verify the required parameter 'job_name' is set
      fail ArgumentError, "Missing the required parameter 'job_name' when calling JobsApi.run_job" if job_name.nil?
      # resource path
      local_var_path = "/jobs/{job_name}".sub('{format}','json').sub('{' + 'job_name' + '}', job_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#run_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Show a job. 
    # @param job_name The job that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def show_job_by_name(job_name, opts = {})
      data, _status_code, _headers = show_job_by_name_with_http_info(job_name, opts)
      return data
    end

    # 
    # Show a job. 
    # @param job_name The job that needs to be fetched.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def show_job_by_name_with_http_info(job_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.show_job_by_name ..."
      end
      # verify the required parameter 'job_name' is set
      fail ArgumentError, "Missing the required parameter 'job_name' when calling JobsApi.show_job_by_name" if job_name.nil?
      # resource path
      local_var_path = "/jobs/{job_name}".sub('{format}','json').sub('{' + 'job_name' + '}', job_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#show_job_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
