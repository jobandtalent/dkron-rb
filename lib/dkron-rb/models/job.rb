=begin
#Dkron REST API

#You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.  Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add the `pretty=true` param to format the response. 

OpenAPI spec version: 0.10.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Dkron
  # A Job represents a scheduled task to execute.
  class Job
    # Name for the job.
    attr_accessor :name

    # Cron expression for the job.
    attr_accessor :schedule

    # Timezone where the job will be executed. By default and when field is set to empty string, the job will run in local time.
    attr_accessor :timezone

    # Owner of the job
    attr_accessor :owner

    # Email of the owner
    attr_accessor :owner_email

    # Number of successful executions
    attr_accessor :success_count

    # Number of failed executions
    attr_accessor :error_count

    # Last time this job executed successfully
    attr_accessor :last_success

    # Last time this job failed
    attr_accessor :last_error

    # Disabled state of the job
    attr_accessor :disabled

    # Target nodes tags of this job
    attr_accessor :tags

    # Number of times to retry a failed job execution
    attr_accessor :retries

    # The name/id of the job that will trigger the execution of this job
    attr_accessor :parent_job

    # Array containing the jobs that depends on this one
    attr_accessor :dependent_jobs

    attr_accessor :processors

    # Concurrency policy for the job allow/forbid
    attr_accessor :concurrency

    # Executor plugin used to run the job
    attr_accessor :executor

    attr_accessor :executor_config


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'schedule' => :'schedule',
        :'timezone' => :'timezone',
        :'owner' => :'owner',
        :'owner_email' => :'owner_email',
        :'success_count' => :'success_count',
        :'error_count' => :'error_count',
        :'last_success' => :'last_success',
        :'last_error' => :'last_error',
        :'disabled' => :'disabled',
        :'tags' => :'tags',
        :'retries' => :'retries',
        :'parent_job' => :'parent_job',
        :'dependent_jobs' => :'dependent_jobs',
        :'processors' => :'processors',
        :'concurrency' => :'concurrency',
        :'executor' => :'executor',
        :'executor_config' => :'executor_config'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'schedule' => :'String',
        :'timezone' => :'String',
        :'owner' => :'String',
        :'owner_email' => :'String',
        :'success_count' => :'Integer',
        :'error_count' => :'Integer',
        :'last_success' => :'DateTime',
        :'last_error' => :'DateTime',
        :'disabled' => :'BOOLEAN',
        :'tags' => :'Hash<String, String>',
        :'retries' => :'Integer',
        :'parent_job' => :'String',
        :'dependent_jobs' => :'Array<String>',
        :'processors' => :'Processors',
        :'concurrency' => :'String',
        :'executor' => :'String',
        :'executor_config' => :'ExecutorConfig'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'schedule')
        self.schedule = attributes[:'schedule']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'owner_email')
        self.owner_email = attributes[:'owner_email']
      end

      if attributes.has_key?(:'success_count')
        self.success_count = attributes[:'success_count']
      end

      if attributes.has_key?(:'error_count')
        self.error_count = attributes[:'error_count']
      end

      if attributes.has_key?(:'last_success')
        self.last_success = attributes[:'last_success']
      end

      if attributes.has_key?(:'last_error')
        self.last_error = attributes[:'last_error']
      end

      if attributes.has_key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.has_key?(:'retries')
        self.retries = attributes[:'retries']
      end

      if attributes.has_key?(:'parent_job')
        self.parent_job = attributes[:'parent_job']
      end

      if attributes.has_key?(:'dependent_jobs')
        if (value = attributes[:'dependent_jobs']).is_a?(Array)
          self.dependent_jobs = value
        end
      end

      if attributes.has_key?(:'processors')
        self.processors = attributes[:'processors']
      end

      if attributes.has_key?(:'concurrency')
        self.concurrency = attributes[:'concurrency']
      end

      if attributes.has_key?(:'executor')
        self.executor = attributes[:'executor']
      end

      if attributes.has_key?(:'executor_config')
        self.executor_config = attributes[:'executor_config']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @schedule.nil?
        invalid_properties.push("invalid value for 'schedule', schedule cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @schedule.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          schedule == o.schedule &&
          timezone == o.timezone &&
          owner == o.owner &&
          owner_email == o.owner_email &&
          success_count == o.success_count &&
          error_count == o.error_count &&
          last_success == o.last_success &&
          last_error == o.last_error &&
          disabled == o.disabled &&
          tags == o.tags &&
          retries == o.retries &&
          parent_job == o.parent_job &&
          dependent_jobs == o.dependent_jobs &&
          processors == o.processors &&
          concurrency == o.concurrency &&
          executor == o.executor &&
          executor_config == o.executor_config
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, schedule, timezone, owner, owner_email, success_count, error_count, last_success, last_error, disabled, tags, retries, parent_job, dependent_jobs, processors, concurrency, executor, executor_config].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Dkron.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
