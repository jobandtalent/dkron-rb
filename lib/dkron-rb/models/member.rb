=begin
Dkron REST API

You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.\n\nDkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.\n\nDefault API responses are unformatted JSON add the `pretty=true` param to format the response.\n

OpenAPI spec version: 0.7.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module Dkron
  # A member represents a cluster member node.
  class Member
    # Node name
    attr_accessor :name

    # IP Address
    attr_accessor :addr

    # Port number
    attr_accessor :port

    # Tags asociated with this node
    attr_accessor :tags

    # The serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus
    attr_accessor :status

    # Serf protocol minimum version this node can understand or speak
    attr_accessor :protocol_min

    attr_accessor :protocol_max

    # Serf protocol current version this node can understand or speak
    attr_accessor :protocol_cur

    # Serf delegate protocol minimum version this node can understand or speak
    attr_accessor :delegate_min

    # Serf delegate protocol minimum version this node can understand or speak
    attr_accessor :delegate_max

    # Serf delegate protocol minimum version this node can understand or speak
    attr_accessor :delegate_cur

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'name' => :'Name',
        
        :'addr' => :'Addr',
        
        :'port' => :'Port',
        
        :'tags' => :'Tags',
        
        :'status' => :'Status',
        
        :'protocol_min' => :'ProtocolMin',
        
        :'protocol_max' => :'ProtocolMax',
        
        :'protocol_cur' => :'ProtocolCur',
        
        :'delegate_min' => :'DelegateMin',
        
        :'delegate_max' => :'DelegateMax',
        
        :'delegate_cur' => :'DelegateCur'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'addr' => :'String',
        :'port' => :'Integer',
        :'tags' => :'Hash<String, String>',
        :'status' => :'Integer',
        :'protocol_min' => :'Integer',
        :'protocol_max' => :'Integer',
        :'protocol_cur' => :'Integer',
        :'delegate_min' => :'Integer',
        :'delegate_max' => :'Integer',
        :'delegate_cur' => :'Integer'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'Name']
        self.name = attributes[:'Name']
      end
      
      if attributes[:'Addr']
        self.addr = attributes[:'Addr']
      end
      
      if attributes[:'Port']
        self.port = attributes[:'Port']
      end
      
      if attributes[:'Tags']
        if (value = attributes[:'Tags']).is_a?(Array)
          self.tags = value
        end
      end
      
      if attributes[:'Status']
        self.status = attributes[:'Status']
      end
      
      if attributes[:'ProtocolMin']
        self.protocol_min = attributes[:'ProtocolMin']
      end
      
      if attributes[:'ProtocolMax']
        self.protocol_max = attributes[:'ProtocolMax']
      end
      
      if attributes[:'ProtocolCur']
        self.protocol_cur = attributes[:'ProtocolCur']
      end
      
      if attributes[:'DelegateMin']
        self.delegate_min = attributes[:'DelegateMin']
      end
      
      if attributes[:'DelegateMax']
        self.delegate_max = attributes[:'DelegateMax']
      end
      
      if attributes[:'DelegateCur']
        self.delegate_cur = attributes[:'DelegateCur']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          addr == o.addr &&
          port == o.port &&
          tags == o.tags &&
          status == o.status &&
          protocol_min == o.protocol_min &&
          protocol_max == o.protocol_max &&
          protocol_cur == o.protocol_cur &&
          delegate_min == o.delegate_min &&
          delegate_max == o.delegate_max &&
          delegate_cur == o.delegate_cur
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [name, addr, port, tags, status, protocol_min, protocol_max, protocol_cur, delegate_min, delegate_max, delegate_cur].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = Dkron.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
